// <auto-generated />
using System;
using ABulkCopy.TestData.Initialization;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABulkCopy.TestData.Migrations
{
    [DbContext(typeof(IdsTestingContext))]
    [Migration("20230412063514_TestTable")]
    partial class TestTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABulkCopy.TestData.Entities.AllTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("ApproxNumFloat")
                        .HasColumnType("float");

                    b.Property<float>("ApproxNumReal")
                        .HasColumnType("real");

                    b.Property<byte[]>("BinBinary5K")
                        .HasMaxLength(5000)
                        .HasColumnType("binary");

                    b.Property<byte[]>("BinVarbinary10K")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("CharStrChar20")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)");

                    b.Property<string>("CharStrNChar20")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)");

                    b.Property<string>("CharStrNVarchar10K")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CharStrNVarchar20")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CharStrVarchar10K")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CharStrVarchar20")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("DTDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("DTDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DTDateTime2")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset>("DTDateTimeOffset")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DTSmallDateTime")
                        .HasColumnType("smalldatetime");

                    b.Property<TimeSpan>("DTTime")
                        .HasColumnType("time");

                    b.Property<long>("ExactNumBigInt")
                        .HasColumnType("bigint");

                    b.Property<bool>("ExactNumBit")
                        .HasColumnType("bit");

                    b.Property<decimal>("ExactNumDecimal")
                        .HasPrecision(28, 3)
                        .HasColumnType("decimal");

                    b.Property<int>("ExactNumInt")
                        .HasColumnType("int");

                    b.Property<decimal>("ExactNumMoney")
                        .HasColumnType("money");

                    b.Property<decimal>("ExactNumNumeric")
                        .HasPrecision(28, 3)
                        .HasColumnType("numeric");

                    b.Property<short>("ExactNumSmallInt")
                        .HasColumnType("smallint");

                    b.Property<decimal>("ExactNumSmallMoney")
                        .HasColumnType("smallmoney");

                    b.Property<byte>("ExactNumTinyInt")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("OtherGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OtherXml")
                        .HasColumnType("xml");

                    b.HasKey("Id");

                    b.ToTable("AllTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ApproxNumFloat = 1234567.1234500001,
                            ApproxNumReal = 123.123f,
                            BinBinary5K = new byte[] {},
                            BinVarbinary10K = new byte[] {},
                            CharStrChar20 = "12345678901234567890",
                            CharStrNChar20 = "123456789ﯵ1234567890",
                            CharStrNVarchar10K = "ﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵﯵ",
                            CharStrNVarchar20 = "123456789ﯵ1234567890",
                            CharStrVarchar10K = "",
                            CharStrVarchar20 = "12345678901234567890",
                            DTDate = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DTDateTime = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DTDateTime2 = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DTDateTimeOffset = new DateTimeOffset(new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 1, 0, 0, 0)),
                            DTSmallDateTime = new DateTime(2023, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DTTime = new TimeSpan(1, 2, 3, 4, 0),
                            ExactNumBigInt = 123456789012345L,
                            ExactNumBit = true,
                            ExactNumDecimal = 1234567.12345m,
                            ExactNumInt = 123456789,
                            ExactNumMoney = 1234567.12345m,
                            ExactNumNumeric = 1234567.12345m,
                            ExactNumSmallInt = (short)-7616,
                            ExactNumSmallMoney = 123.123m,
                            ExactNumTinyInt = (byte)123,
                            OtherGuid = new Guid("a17542d9-a61c-4e4c-8512-daffc1416142"),
                            OtherXml = "<?xml version=\"1.0\" encoding=\"utf-8\" ?> <SomeTag>A value</SomeTag>"
                        });
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.AllowedCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("AllowedCorsOrigins");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.AllowedCustomGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GrantType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("AllowedCustomGrantTypes");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Audit", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<string>("AuditStorePath")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("EntityCompressed")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tenant")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit4Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AuditId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.CacheCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Protocol")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CacheCommands");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClaimProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientClaimId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.HasKey("Id");

                    b.HasIndex("ClientClaimId");

                    b.ToTable("ClaimProperties");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Client", b =>
                {
                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("int");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("int");

                    b.Property<bool>("AllowAccessToAllScopes")
                        .HasColumnType("bit");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Flow")
                        .HasColumnType("int");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("int");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerTenant")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("PrefixClientClaims")
                        .HasColumnType("bit");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("int");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("int");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ClientId");

                    b.HasIndex("OwnerTenant");

                    b.ToTable("ConfiguredClients");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Issuer")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("OriginalIssuer")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("ValueType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientClaims");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClientScope", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ScopeId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ClientId", "ScopeId");

                    b.HasIndex("ScopeId");

                    b.ToTable("ClientScope");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("Expiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecrets");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DomainName")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ExternalPersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("ExternalPersistedGrants");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ExternalUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExternalUserProfileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExternalUserProfileId");

                    b.ToTable("ExternalUserClaims");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ExternalUserProfile", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Provider")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Unit4Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("SubjectId");

                    b.ToTable("ExternalUserProfiles");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Idp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Authority")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("IdpName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdpRegId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdpSecret")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<bool>("IncludeIdentityScopesInConsent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("NameClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Protocol")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Idps");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.IdpMetaData", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Raw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IdpMetaData");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Login", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdpName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("U4SessionId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.LoginData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("LoginId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("LoginData");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.OpenIdConnectOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AcrValues")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("EndSessionEndpoint")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<int>("IdpId")
                        .HasColumnType("int");

                    b.Property<string>("ResponseType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Scope")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IdpId")
                        .IsUnique();

                    b.ToTable("OpenIdConnectOptions");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Permission", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.HasKey("SubjectId", "ClientId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.PermissionsHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TenantId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("PermissionsHistory");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.PostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Uri")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PostLogoutRedirectUris");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.PurgeSemaphore", b =>
                {
                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Value");

                    b.ToTable("PurgeSemaphore");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.RedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Uri")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RedirectUris");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Scope", b =>
                {
                    b.Property<string>("ScopeId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("AllowUnrestrictedIntrospection")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowedForTenantSpecificClients")
                        .HasColumnType("bit");

                    b.Property<string>("ClaimsRule")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("bit");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeAllClaimsForUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandardScope")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ScopeId");

                    b.ToTable("ConfiguredScopes");

                    b.HasData(
                        new
                        {
                            ScopeId = "openid",
                            AllowUnrestrictedIntrospection = false,
                            AllowedForTenantSpecificClients = true,
                            Description = "The application needs this to be able to securely identify you. If you do not grant this then you cannot use the application.",
                            DisplayName = "Use your user identifier",
                            Emphasize = true,
                            Enabled = true,
                            IncludeAllClaimsForUser = false,
                            IsStandardScope = true,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Required = true,
                            ShowInDiscoveryDocument = true,
                            Type = 0
                        },
                        new
                        {
                            ScopeId = "profile",
                            AllowUnrestrictedIntrospection = false,
                            AllowedForTenantSpecificClients = true,
                            Description = "Your user profile information (first name, last name, etc.).",
                            DisplayName = "Use your user information",
                            Emphasize = true,
                            Enabled = true,
                            IncludeAllClaimsForUser = false,
                            IsStandardScope = true,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Required = false,
                            ShowInDiscoveryDocument = true,
                            Type = 0
                        },
                        new
                        {
                            ScopeId = "email",
                            AllowUnrestrictedIntrospection = false,
                            AllowedForTenantSpecificClients = true,
                            Description = "",
                            DisplayName = "Use your email address",
                            Emphasize = true,
                            Enabled = true,
                            IncludeAllClaimsForUser = false,
                            IsStandardScope = true,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Required = false,
                            ShowInDiscoveryDocument = true,
                            Type = 0
                        },
                        new
                        {
                            ScopeId = "offline_access",
                            AllowUnrestrictedIntrospection = false,
                            AllowedForTenantSpecificClients = true,
                            Description = "Access to an application has limited lifetime. Letting the application remember you extends your access lifetime and for example allows you to login only once. The application may ask for permission on your behalf without prompting for permission (including when you are not present).",
                            DisplayName = "Remember you (offline access)",
                            Emphasize = true,
                            Enabled = true,
                            IncludeAllClaimsForUser = false,
                            IsStandardScope = true,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Required = false,
                            ShowInDiscoveryDocument = true,
                            Type = 1
                        },
                        new
                        {
                            ScopeId = "phone",
                            AllowUnrestrictedIntrospection = false,
                            AllowedForTenantSpecificClients = true,
                            Description = "",
                            DisplayName = "Use your phone number",
                            Emphasize = true,
                            Enabled = true,
                            IncludeAllClaimsForUser = false,
                            IsStandardScope = true,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Required = false,
                            ShowInDiscoveryDocument = true,
                            Type = 0
                        },
                        new
                        {
                            ScopeId = "address",
                            AllowUnrestrictedIntrospection = false,
                            AllowedForTenantSpecificClients = true,
                            Description = "",
                            DisplayName = "Use your postal address",
                            Emphasize = true,
                            Enabled = true,
                            IncludeAllClaimsForUser = false,
                            IsStandardScope = true,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Required = false,
                            ShowInDiscoveryDocument = true,
                            Type = 0
                        },
                        new
                        {
                            ScopeId = "roles",
                            AllowUnrestrictedIntrospection = false,
                            AllowedForTenantSpecificClients = true,
                            Description = "The application supports authorization wholly or in part based on the roles you have been assigned by your organization. Rights within the application might be limited if you fail to grant this.",
                            DisplayName = "Access your externally assigned roles",
                            Emphasize = true,
                            Enabled = true,
                            IncludeAllClaimsForUser = false,
                            IsStandardScope = true,
                            LastUpdate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Required = false,
                            ShowInDiscoveryDocument = true,
                            Type = 1
                        });
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlwaysIncludeInIdToken")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("ScopeClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlwaysIncludeInIdToken = true,
                            Name = "sub",
                            ScopeId = "openid"
                        },
                        new
                        {
                            Id = 2,
                            AlwaysIncludeInIdToken = true,
                            Name = "tenant",
                            ScopeId = "openid"
                        },
                        new
                        {
                            Id = 3,
                            AlwaysIncludeInIdToken = true,
                            Name = "unit4_id",
                            ScopeId = "openid"
                        },
                        new
                        {
                            Id = 4,
                            AlwaysIncludeInIdToken = false,
                            Name = "name",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 5,
                            AlwaysIncludeInIdToken = false,
                            Name = "family_name",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 6,
                            AlwaysIncludeInIdToken = false,
                            Name = "given_name",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 7,
                            AlwaysIncludeInIdToken = false,
                            Name = "middle_name",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 8,
                            AlwaysIncludeInIdToken = false,
                            Name = "nickname",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 9,
                            AlwaysIncludeInIdToken = false,
                            Name = "preferred_username",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 10,
                            AlwaysIncludeInIdToken = false,
                            Name = "profile",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 11,
                            AlwaysIncludeInIdToken = false,
                            Name = "picture",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 12,
                            AlwaysIncludeInIdToken = false,
                            Name = "website",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 13,
                            AlwaysIncludeInIdToken = false,
                            Name = "gender",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 14,
                            AlwaysIncludeInIdToken = false,
                            Name = "birthdate",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 15,
                            AlwaysIncludeInIdToken = false,
                            Name = "zoneinfo",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 16,
                            AlwaysIncludeInIdToken = false,
                            Name = "locale",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 17,
                            AlwaysIncludeInIdToken = false,
                            Name = "updated_at",
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 18,
                            AlwaysIncludeInIdToken = false,
                            Name = "email",
                            ScopeId = "email"
                        },
                        new
                        {
                            Id = 19,
                            AlwaysIncludeInIdToken = false,
                            Name = "email_verified",
                            ScopeId = "email"
                        },
                        new
                        {
                            Id = 20,
                            AlwaysIncludeInIdToken = false,
                            Name = "phone_number",
                            ScopeId = "phone"
                        },
                        new
                        {
                            Id = 21,
                            AlwaysIncludeInIdToken = false,
                            Name = "phone_number_verified",
                            ScopeId = "phone"
                        },
                        new
                        {
                            Id = 22,
                            AlwaysIncludeInIdToken = false,
                            Name = "address",
                            ScopeId = "address"
                        },
                        new
                        {
                            Id = 23,
                            AlwaysIncludeInIdToken = false,
                            Description = "External role claims",
                            Name = "role",
                            ScopeId = "roles"
                        });
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ScopeConsentOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("LinkDescription")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("bit");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId")
                        .IsUnique();

                    b.ToTable("ScopeConsentOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RequireConsent = true,
                            ScopeId = "openId"
                        },
                        new
                        {
                            Id = 2,
                            RequireConsent = true,
                            ScopeId = "profile"
                        },
                        new
                        {
                            Id = 3,
                            RequireConsent = true,
                            ScopeId = "email"
                        },
                        new
                        {
                            Id = 4,
                            RequireConsent = true,
                            ScopeId = "offline_access"
                        },
                        new
                        {
                            Id = 5,
                            RequireConsent = true,
                            ScopeId = "phone"
                        },
                        new
                        {
                            Id = 6,
                            RequireConsent = true,
                            ScopeId = "address"
                        },
                        new
                        {
                            Id = 7,
                            RequireConsent = true,
                            ScopeId = "roles"
                        });
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ScopeSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset?>("Expiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId");

                    b.ToTable("ScopeSecrets");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ScopeTitle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Language")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScopeId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("ScopeTitles");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Tenant", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("AllowPartialLogin")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TenantName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TenantId");

                    b.ToTable("ConfiguredTenants");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Unit4IdClaimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(2047)
                        .HasColumnType("nvarchar(2047)");

                    b.Property<int>("IdpId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdpId");

                    b.ToTable("Unit4IdClaimTypes");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.UsageHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UsageHistory");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.AllowedCorsOrigin", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Client", null)
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.AllowedCustomGrantType", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Client", null)
                        .WithMany("AllowedCustomGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClaimProperty", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.ClientClaim", null)
                        .WithMany("Properties")
                        .HasForeignKey("ClientClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Client", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("OwnerTenant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClientClaim", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Client", null)
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClientScope", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABulkCopy.TestData.Entities.Scope", "Scope")
                        .WithMany("ScopeClients")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClientSecret", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Client", null)
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Domain", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Tenant", null)
                        .WithMany("Domains")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ExternalUserClaim", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.ExternalUserProfile", null)
                        .WithMany("Claims")
                        .HasForeignKey("ExternalUserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Idp", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Tenant", null)
                        .WithMany("Idps")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.LoginData", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Login", null)
                        .WithMany("LoginData")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.OpenIdConnectOptions", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Idp", null)
                        .WithOne("OpenIdConnectOptions")
                        .HasForeignKey("ABulkCopy.TestData.Entities.OpenIdConnectOptions", "IdpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.PostLogoutRedirectUri", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Client", null)
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.RedirectUri", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Client", null)
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ScopeClaim", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Scope", null)
                        .WithMany("Claims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ScopeConsentOption", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Scope", null)
                        .WithOne("ConsentOptions")
                        .HasForeignKey("ABulkCopy.TestData.Entities.ScopeConsentOption", "ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ScopeSecret", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Scope", null)
                        .WithMany("ScopeSecrets")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Unit4IdClaimType", b =>
                {
                    b.HasOne("ABulkCopy.TestData.Entities.Idp", null)
                        .WithMany("Unit4IdClaimType")
                        .HasForeignKey("IdpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedCustomGrantTypes");

                    b.Navigation("Claims");

                    b.Navigation("ClientScopes");

                    b.Navigation("ClientSecrets");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ClientClaim", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.ExternalUserProfile", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Idp", b =>
                {
                    b.Navigation("OpenIdConnectOptions");

                    b.Navigation("Unit4IdClaimType");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Login", b =>
                {
                    b.Navigation("LoginData");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Scope", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("ConsentOptions");

                    b.Navigation("ScopeClients");

                    b.Navigation("ScopeSecrets");
                });

            modelBuilder.Entity("ABulkCopy.TestData.Entities.Tenant", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Idps");
                });
#pragma warning restore 612, 618
        }
    }
}
