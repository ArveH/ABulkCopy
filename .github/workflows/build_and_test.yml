name: Build Console application
on:
  pull_request:
    branches: [ "master" ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (major.minor.patch)'
        required: true
        default: '0.0.0'
env:
  slnFile: 'src/ABulkCopy.sln'
  consoleProjFile: 'src/ABulkCopy.Cmd/ABulkCopy.Cmd.csproj'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      currentVersion: v${{ steps.gitversion.outputs.SemVer }}

    steps:
    - name: Checkout all
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      if: github.event_name == 'workflow_dispatch'
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'

    - name: Build
      run: dotnet build ${{env.slnFile}}

    - name: Determine version
      id: gitversion
      if: github.event_name == 'workflow_dispatch'
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        updateAssemblyInfo: true
        useConfigFile: true
        overrideConfig: |
          next-version=${{ github.event.inputs.version }}

    - name: Publish Windows
      if: github.event_name == 'workflow_dispatch'
      run: dotnet publish ${{env.consoleProjFile}} -c Release -r win-x64 -o ./output/windows

    - name: Publish Linux
      if: github.event_name == 'workflow_dispatch'
      run: dotnet publish ${{env.consoleProjFile}} -c Release -r linux-arm64 -o ./output/linux

    - name: Publish Mac
      if: github.event_name == 'workflow_dispatch'
      run: dotnet publish ${{env.consoleProjFile}} -c Release -r osx-arm64 -o ./output/mac

    - name: Upload program artifact
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: program
        path: ./output/

    - name: Display structure of artifact files
      run: ls -R

    - name: Upload tests artifact
      uses: actions/upload-artifact@v4
      with:
        name: tests
        path: ./src/**/*.Tests
          
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    outputs:
      currentVersion: ${{ needs.build.outputs.currentVersion }}

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: tests

    - name: Display structure of artifact files
      run: ls -R
  
    - name: UnitTest AParser
      if: always()
      run: dotnet test ./AParser.Tests/bin/Debug/net8.0/AParser.Tests.dll -v m
    
    - name: UnitTest Common
      if: always()
      run: dotnet test ./Common.Tests/bin/Debug/net8.0/Common.Tests.dll -v m 

    - name: UnitTest ASqlServer
      if: always()
      run: dotnet test ./ASqlServer.Tests/bin/Debug/net8.0/ASqlServer.Tests.dll -v m

    - name: UnitTest APostgres
      if: always()
      run: dotnet test ./APostgres.Tests/bin/Debug/net8.0/APostgres.Tests.dll -v m

    - name: DbTest SqlServer
      if: always()
      run: dotnet test ./SqlServer.Tests/bin/Debug/net8.0/SqlServer.Tests.dll -v m

    - name: DbTest Postgres
      if: always()
      run: dotnet test ./Postgres.Tests/bin/Debug/net8.0/Postgres.Tests.dll -v m

    - name: DbTests CrossRDBMS
      if: always()
      run: dotnet test ./CrossRDBMS.Tests/bin/Debug/net8.0/CrossRDBMS.Tests.dll -v m

  release:
    if: github.event_name == 'workflow_dispatch'
    name: Release
    runs-on: ubuntu-latest
    needs: test
    env:
      currentVersion: ${{ needs.test.outputs.currentVersion }}

    steps:
    - name: Download program artifact
      uses: actions/download-artifact@v4
      with:
        name: program
    
    - name: Display structure of artifact files
      run: ls -R

    - name: Zip release files
      uses: thedoctor0/zip-release@0.7.5
      with:
        type: 'zip'
        filename: 'release.zip'

    - name: List files after zip and creating release
      run: ls -R
    
    - name: Create release
      id: upload-release-asset
      uses: softprops/action-gh-release@v2
      with:
        files: ./release.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Release ${{ env.currentVersion }}
        tag_name: ${{ env.currentVersion }}
        body: |
          You can find the release notes [here.](https://arveh.github.io/ABulkCopy.Docs/release_notes/)
        draft: false
        prerelease: true
